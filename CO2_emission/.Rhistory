labs(title = "Mean CO2 Emissions by Region",
subtitle = "Each bar is one country",
x = NULL, y = "Mean CO2 Emissions",
fill = "World Region") +
theme_minimal(base_size = 12) +
theme (
axis.text.x =NULL,
axis.text.y = element_text(size = 1, hjust = 1),
plot.background = element_rect(fill = "grey88", color = NA),
panel.background = element_rect(fill = NA, color = NA)
)+
scale_fill_manual(values = color_palette)  # Set the defined color palette
b
ggsave("co2_country.png", plot = b, width = 10, height = 6, dpi = 600)
top_five_country <- slice(df_country_sorted, 1:5)
df2019 <- subset(df[,c("country_name", "country_code", "region", "X2019")])
model2019 <- aov(X2019 ~ region, data = df2019)
summary(model2019)
model <- aov(country_mean ~ region, data = df)
summary(model)
library(agricolae)
LSD_2019 <- LSD.test(model2019, "region", alpha = 0.05, console = TRUE)
RegionLSD <- LSD.test(model, "region", alpha = 0.05, console = TRUE)
library(tidyr)
# Reshape the dataset using tidyr::pivot_longer
long_df <- df[, -ncol(df)] %>%
pivot_longer(cols = -c(country_name, country_code, region),
names_to = "year",
values_to = "co2_emissions_metric_tons_per_capita")
# remove the "X" prefix from the year column and convert it to a numeric data type
long_df$year <- as.numeric(gsub("X", "", long_df$year))
#check the structure of the df
str(long_df)
unique_levels <- unique(df$region)
print(unique_levels)
top_countries_codes <- c("QAT", "ARE", "BHR")
long_df_countries <- filter(long_df, country_code %in% top_countries_codes)
top_regions <- c("North America", "Middle East & North Africa", "Europe & Central Asia")
long_df_regions <- filter(long_df, region %in% top_regions)
# Load packages
library(tidyverse)
library(fuzzyjoin)
library(ggstream)
library(colorspace)
library(ggtext)
library(cowplot)
#setting ggplot theme
theme_set(theme_minimal(base_size = 12))
theme_update(
plot.title = element_text(
size = 15,
face = "bold",
hjust = .5,
margin = margin(10, 5, 30, 5)
),
plot.caption = element_text(
size = 9,
color = "grey40",
hjust = .5,
margin = margin(20, 0, 5, 0)
),
axis.text.y = element_blank(),
axis.title = element_blank(),
plot.background = element_rect(fill = "grey88", color = NA),
panel.background = element_rect(fill = NA, color = NA),
panel.grid = element_blank(),
panel.spacing.y = unit(0, "lines"),
strip.text.y = element_blank(),
legend.position = "bottom",
legend.text = element_text(size = 9, color = "grey40"),
legend.box.margin = margin(t = 30),
legend.background = element_rect(
color = "grey40",
size = .3,
fill = "grey95"
),
legend.key.height = unit(.25, "lines"),
legend.key.width = unit(2.5, "lines"),
plot.margin = margin(rep(20, 4))
)
# Define the color palette
reds_palette <- colorRampPalette(colors = c("#FFCCCC", "#FF6666", "#FF0000"))
# Generate the palette with three shades of red
pal <- reds_palette(3)
df_smooth_country <- long_df_countries %>%
group_by(country_name, country_code, region) %>%
slice(1:4) %>%
mutate(
year = c(
min(long_df_countries$year) - 5,
min(long_df_countries$year) - 1,
max(long_df_countries$year) + 1,
max(long_df_countries$year) + 5
),
co2_emissions_metric_tons_per_capita = c(0, 5, 5, 0),
)
df_smooth_region <- long_df_regions %>%
group_by(region) %>%
slice(1:4) %>%
mutate(
year = c(
min(long_df_regions$year) - 5,
min(long_df_regions$year) - 1,
max(long_df_regions$year) + 1,
max(long_df_regions$year) + 5
),
co2_emissions_metric_tons_per_capita = c(0, 5, 5, 0),
)
#bind dataframes
long_df_countries_smooth <- long_df_countries %>% bind_rows(df_smooth_country)
long_df_regions_smooth  <- long_df_regions %>% bind_rows(df_smooth_region)
str(long_df_regions_smooth)
grouped_long_df_regions_smooth <- long_df_regions_smooth %>%
group_by(region, year) %>%
summarize(avg_co2_emissions = mean(co2_emissions_metric_tons_per_capita), .groups = "drop")
str(grouped_long_df_regions_smooth)
g_country <- long_df_countries_smooth %>%
ggplot(
aes(
year, co2_emissions_metric_tons_per_capita,
color = country_name,
fill = country_name
)
) +
geom_stream(
geom = "contour",
color = "white",
size = 1.25,
bw = .45 # Controls smoothness
) +
geom_stream(
geom = "polygon",
bw = .45,
size = 0
) +
scale_color_manual(
expand = c(0, 0),
values = pal,
guide = "none"
) +
scale_fill_manual(
values = pal,
name = NULL
)
g_region <- grouped_long_df_regions_smooth %>%
ggplot(
aes(
year, avg_co2_emissions,
color = region,
fill = region
)
) +
geom_stream(
geom = "contour",
color = "white",
size = 1.25,
bw = .45 # Controls smoothness
) +
geom_stream(
geom = "polygon",
bw = .45,
size = 0
) +
scale_color_manual(
expand = c(0, 0),
values = pal,
guide = "none"
) +
scale_fill_manual(
values = pal,
name = NULL
)
g_country
g_region
g_country <- g_country +
labs(
title = "Top 3 countries with more CO2 emissions in metrictons per capita",
caption = "Visualization by Anabella Varela  •  Data obtained from Kaggle • "
)
g_country
g_region <- g_region +
labs(
title = "Top 3 regions with more CO2 emissions in metrictons per capita",
caption = "Visualization by Anabella Varela  •  Data obtained from Kaggle • "
)
g_region
ggsave("country_plot.png", plot = g_country, width = 10, height = 6, dpi = 600)
ggsave("region_plot.png", plot = g_region, width = 10, height = 6, dpi = 600)
View(long_df_countries_smooth)
View(long_df_countries)
View(grouped_long_df_regions_smooth)
View(grouped_long_df_regions_smooth)
# Arrange the data frame in descending order of CO2 emissions
long_df_countries_smooth <- long_df_countries_smooth %>%
arrange(desc(co2_emissions_metric_tons_per_capita))
# Create a factor variable for country_name based on CO2 emissions rank
long_df_countries_smooth$country_rank <- factor(
long_df_countries_smooth$country_name,
levels = rev(long_df_countries_smooth$country_name)
)
# Create a factor variable for country_name based on row numbers
long_df_countries_smooth$country_rank <- factor(
seq_len(nrow(long_df_countries_smooth)),
labels = rev(long_df_countries_smooth$country_name)
)
g_country <- long_df_countries_smooth %>%
ggplot(
aes(
year, co2_emissions_metric_tons_per_capita,
color = country_rank,
fill = country_rank
)
) +
geom_stream(
geom = "contour",
color = "white",
size = 1.25,
bw = .45  # Controls smoothness
) +
geom_stream(
geom = "polygon",
bw = .45,
size = 0
) +
scale_color_manual(
expand = c(0, 0),
values = pal,
guide = "none"
) +
scale_fill_manual(
values = pal,
name = NULL
)
g_country
```{r}
g_country <- long_df_countries_smooth %>%
ggplot(
aes(
year, co2_emissions_metric_tons_per_capita,
color = country_name,
fill = country_name
)
) +
geom_stream(
geom = "contour",
color = "white",
size = 1.25,
bw = .45 # Controls smoothness
) +
geom_stream(
geom = "polygon",
bw = .45,
size = 0
) +
scale_color_manual(
expand = c(0, 0),
values = pal,
guide = "none"
) +
scale_fill_manual(
values = pal,
name = NULL
)
g_region <- grouped_long_df_regions_smooth %>%
ggplot(
aes(
year, avg_co2_emissions,
color = region,
fill = region
)
) +
geom_stream(
geom = "contour",
color = "white",
size = 1.25,
bw = .45 # Controls smoothness
) +
geom_stream(
geom = "polygon",
bw = .45,
size = 0
) +
scale_color_manual(
expand = c(0, 0),
values = pal,
guide = "none"
) +
scale_fill_manual(
values = pal,
name = NULL
)
g_country
g_country
g_region
g_country <- g_country +
labs(
title = "Top 3 countries with more CO2 emissions in metrictons per capita",
caption = "Visualization by Anabella Varela  •  Data obtained from Kaggle • "
)
g_country
g_country
g_region <- g_region +
labs(
title = "Top 3 regions with more CO2 emissions in metrictons per capita",
caption = "Visualization by Anabella Varela  •  Data obtained from Kaggle • "
)
g_region <- g_region +
labs(
title = "Top 3 regions with more CO2 emissions in metrictons per capita",
caption = "Visualization by Anabella Varela  •  Data obtained from Kaggle • "
)
g_region
ggsave("country_plot.png", plot = g_country, width = 10, height = 6, dpi = 600)
ggsave("region_plot.png", plot = g_region, width = 10, height = 6, dpi = 600)
# Create a boxplot with error bars and grouping letters
bplot <- ggplot(df_boxplot, aes(x = region, y = means, fill = region)) +
geom_boxplot() +
geom_errorbar(aes(ymin = means - std, ymax = means +std),
width = 0.2, position = position_dodge(width = 0.75)) +
geom_jitter(color="black", size=0.4, alpha=0.9) +  # Add jittered points for better visibility
labs(x = "Group", y = "Means", title = "Box Plot of Means by Group") +
theme_ipsum()+
scale_fill_viridis(discrete = TRUE, alpha=0.6)
library(tidyverse)
library(viridis)
library(ggplot2)
# Extract the necessary data from the LSD test results for making the box plot
means <- RegionLSD$means$country_mean
std <- RegionLSD$means$std
grouping_letters <- RegionLSD$groups$groups
regions <- sort(unique(df_clean$region))
regions <- sort(unique(df_clean$region))
regions <- sort(unique(df_clean$region))
df <- read.csv("~/2. Anabella/4.GITHUB/Proyects_with_R/CO2_emission/CO2_emission.csv")
str(df)
# Count the number of null cells in the data frame
num_null_cells <- sum(is.na(df))
# Print the result
cat("Number of null cells:", num_null_cells, "\n")
# Count the number of null rows in the data frame
num_null_rows <- sum(apply(is.na(df[,5:35]), 1, all))
# Count the number of rows with at least one NA value
num_rows_withNA <- sum(apply(is.na(df[,5:35]), 1, any))
# Count the number of null columns in the data frame
num_null_cols <- sum(apply(is.na(df[,5:35]), 2, all))
# Count the number of columns with at least one NA value
num_cols_withNA <- sum(apply(is.na(df[,5:35]), 2, any))
# Print the result
cat("Number of null rows:", num_null_rows, "\n")
cat("Number of rows with NA:", num_rows_withNA, "\n")
cat("Number of null columns:", num_null_cols, "\n")
cat("Number of col with NA:", num_cols_withNA, "\n")
df_clean <- df[-which(apply(is.na(df[,5:35]), 1, all)), ]
str(df_clean)
df_clean <- df[-which(apply(is.na(df[,5:35]), 1, all)), ]
str(df_clean)
df_clean <- df[-which(apply(is.na(df[,5:35]), 1, all)), ]
str(df_clean)
# Count the number of null rows in the data frame
num_null_rows <- sum(apply(is.na(df_clean[,5:35]), 1, all))
# Count the number of rows with at least one NA value
num_rows_withNA <- sum(apply(is.na(df_clean[,5:35]), 1, any))
# Count the number of null columns in the data frame
num_null_cols <- sum(apply(is.na(df_clean[,5:35]), 2, all))
# Count the number of columns with at least one NA value
num_cols_withNA <- sum(apply(is.na(df_clean[,5:35]), 2, any))
# Print the result
cat("Number of null rows:", num_null_rows, "\n")
cat("Number of rows with NA:", num_rows_withNA, "\n")
cat("Number of null columns:", num_null_cols, "\n")
cat("Number of col with NA:", num_cols_withNA, "\n")
#To visualize the 8 rows with NAs.
rows_with_missing_values <- df_clean[!complete.cases(df_clean), ]
# Count the number of null cells in the data frame
num_null_cells <- sum(is.na(df_clean))
# Print the result
cat("Number of null cells:", num_null_cells, "\n")
#remove the last column
df_clean <- df_clean[, -ncol(df)]
# delete the Indicator.name column
df_clean <- subset(df_clean, select= -Indicator.Name)
df_clean
colnames(df_clean)[colnames(df_clean) %in% c("Country.Name", "Region")] <- c("country_name", "region")
df_clean
summary (df_clean)
df_data <- df_clean[,4:ncol(df_clean)]
mean_co2_per_year <- colMeans(df_data, na.rm = TRUE) #Setting na.rm = TRUE tells R to remove the NA values before calculating the mean. IMPORTANT!
max_co2_per_column <- apply(df_data, 2, max, na.rm = TRUE)
min_co2_per_column <- apply(df_data, 2, min, na.rm = TRUE)
print(mean_co2_per_year)
print(max_co2_per_column)
print(min_co2_per_column)
# Load the required libraries
library(ggplot2)
library(gganimate)
library(transformr)
#Years vector
years = seq(1990, 2019)
# I have the vectors mean_co2_per_year,min and max_values_per_column
# Create a data.frame to store the data
df_plot <- data.frame(Year = years,
Mean_CO2_Emissions = mean_co2_per_year,
Max_CO2_Emissions = max_co2_per_column,
Min_CO2_Emissions = min_co2_per_column)
# Create a line plot
p <- ggplot(df_plot, aes(x = Year)) +
geom_line(aes(y = Mean_CO2_Emissions, color = "Mean CO2 Emissions"), size = 1.5) +
geom_line(aes(y = Max_CO2_Emissions, color = "Max CO2 Emissions"), size = 1.5) +
geom_line(aes(y = Min_CO2_Emissions, color = "Min CO2 Emissions"), size = 1.5) +
labs(title = "CO2 Emissions Over Time",
x = "Year",
y = "CO2 Emissions",
color = "Emission Type") +
scale_color_manual(values = c("red4","darkorange", "deepskyblue4"))
p
ggsave("co2_overtime.png", plot = p, width = 10, height = 6, dpi = 600)
df_clean$country_mean <- rowMeans(df_clean[,4:ncol(df_clean)], na.rm = TRUE)
df_country_sorted <- df_clean %>% arrange(desc(country_mean)) # order the table from high to low mean emission
head(df_country_sorted)
tail(df_country_sorted)
library(dplyr)
df_region_summary <- df_country_sorted %>% #create a new df
group_by(region) %>% # Group the data by region
summarize(region_mean = mean(country_mean, na.rm = TRUE)) %>% #calculate the mean emission for each region
arrange(desc(region_mean)) # Order the new summary table based on region_mean in descending order
print (df_region_summary)
# Here, we are using the "Dark2" color palette from RColorBrewer
library(RColorBrewer)
color_palette <- brewer.pal(n = 7, name = "Dark2")
region_order <- c("North America",
"Middle East & North Africa",
"Europe & Central Asia",
"East Asia & Pacific",
"Latin America & Caribbean",
"Sub-Saharan Africa",
"South Asia")
b <- ggplot(
df_country_sorted, aes(x = reorder(country_code, +country_mean), y = country_mean, fill = region)
) +
geom_bar(stat = "identity") +  # Create the bar chart
coord_flip() +  # Flip the x and y-axis to make a horizontal bar chart
labs(title = "World mean CO2 emissions (1990-2019)",
subtitle = "Each bar is one country",
x = NULL, y = "Mean CO2 Emissions",
fill = "World Region") +
theme_minimal(base_size = 12) +
theme (
axis.text.x =NULL,
axis.text.y = element_text(size = 1, hjust = 1),
plot.background = element_rect(fill = "grey88", color = NA),
panel.background = element_rect(fill = NA, color = NA)
)+
scale_fill_manual(values = color_palette, breaks = region_order)  # Set the defined color palette
ggsave("co2_country.png", plot = b, width = 10, height = 6, dpi = 600)
b
ANOVAmodel <- aov(country_mean ~ region, data = df_clean)
summary(ANOVAmodel)
library(agricolae)
RegionLSD <- LSD.test(ANOVAmodel, "region", alpha = 0.05, console = TRUE)
RegionLSD$means
library(tidyverse)
library(viridis)
library(ggplot2)
# Extract the necessary data from the LSD test results for making the box plot
means <- RegionLSD$means$country_mean
std <- RegionLSD$means$std
grouping_letters <- RegionLSD$groups$groups
regions <- sort(unique(df_clean$region))
#create a df
df_boxplot <- data.frame(region=regions, means= means, std = std, group = grouping_letters)
# Create a boxplot with error bars and grouping letters
bplot <- ggplot(df_boxplot, aes(x = region, y = means, fill = region)) +
geom_boxplot() +
geom_errorbar(aes(ymin = means - std, ymax = means +std),
width = 0.2, position = position_dodge(width = 0.75)) +
geom_jitter(color="black", size=0.4, alpha=0.9) +  # Add jittered points for better visibility
labs(x = "Group", y = "Means", title = "Box Plot of Means by Group") +
theme_ipsum()+
scale_fill_viridis(discrete = TRUE, alpha=0.6)
# Create a boxplot with error bars and grouping letters
bplot <- ggplot(df_boxplot, aes(x = region, y = means, fill = region)) +
geom_boxplot() +
geom_errorbar(aes(ymin = means - std, ymax = means +std),
width = 0.2, position = position_dodge(width = 0.75)) +
geom_jitter(color="black", size=0.4, alpha=0.9) +  # Add jittered points for better visibility
labs(x = "Group", y = "Means", title = "Box Plot of Means by Group") +
theme_minimal()+
scale_fill_viridis(discrete = TRUE, alpha=0.6)
bplot
# Create a boxplot with error bars and grouping letters
bplot <- ggplot(df_boxplot, aes(x = region, y = means, fill = region)) +
geom_boxplot() +
geom_errorbar(aes(ymin = means - std, ymax = means +std),
width = 0.2, position = position_dodge(width = 0.75)) +
geom_jitter(color="black", size=0.4, alpha=0.9) +  # Add jittered points for better visibility
labs(x = "Regions", y = "Means", title = "Box Plot of Means by Region", fill = "means") +
theme_minimal()+
scale_fill_viridis(discrete = TRUE, alpha=0.6)
bplot
# Create a boxplot with error bars and grouping letters
bplot <- ggplot(df_boxplot, aes(x = region, y = means, fill = region)) +
geom_boxplot() +
geom_errorbar(aes(ymin = means - std, ymax = means +std),
width = 0.2, position = position_dodge(width = 0.75)) +
geom_jitter(color="black", size=0.4, alpha=0.9) +  # Add jittered points for better visibility
labs(x = "Regions", y = "Means", title = "Box Plot of Means by Region") +
theme_minimal()+
scale_fill_viridis(discrete = TRUE, alpha=0.6)
bplot
plot(RegionLSD)
plot(RegionLSD, variation="IQR")
plot(RegionLSD, variation="SD")
